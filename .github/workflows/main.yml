name: Secure RDP with Ngrok

on:
  workflow_dispatch:
    inputs:
      timeout-minutes:
        description: 'Timeout in minutes'
        required: true
        default: '360'  # Keep this as a string for input

jobs:
  setup-rdp:
    name: Setup Secure RDP
    runs-on: windows-latest
    timeout-minutes: ${{ fromJSON(github.event.inputs.timeout-minutes) }}  # Convert to number

    steps:
    - name: Check for required secrets
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
        RDP_PASSWORD: ${{ secrets.RDP_PASSWORD }}
      run: |
        if (-not $env:NGROK_AUTH_TOKEN -or -not $env:RDP_PASSWORD) {
          throw "Missing required secrets. Please set NGROK_AUTH_TOKEN and RDP_PASSWORD in your repository secrets."
        }

    - name: Install Ngrok using Chocolatey
      run: choco install ngrok -y

    - name: Authenticate with Ngrok
      run: ngrok config add-authtoken ${{ secrets.NGROK_AUTH_TOKEN }}

    - name: Enable and configure Remote Desktop
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1
        $Password = ConvertTo-SecureString "${{ secrets.RDP_PASSWORD }}" -AsPlainText -Force
        Set-LocalUser -Name "runneradmin" -Password $Password
        Write-Host "RDP is now enabled and configured."

    - name: Create Ngrok tunnel
      run: |
        Start-Process -FilePath ngrok -ArgumentList "tcp 3389 --log=stdout" -NoNewWindow
        Start-Sleep -Seconds 5
        
        # Fetch the tunnel address from Ngrok API
        $API_URL = "http://localhost:4040/api/tunnels"
        
        # Retry fetching the tunnel address in case it takes time to establish the tunnel
        $MaxRetries = 10
        $RetryCount = 0
        
        while ($RetryCount -lt $MaxRetries) {
          try {
            $Tunnels = Invoke-RestMethod -Uri $API_URL
            
            # Find the first TCP tunnel created by Ngrok
            $SecureTunnel = $Tunnels.tunnels | Where-Object {$_.proto -eq "tcp"} | Select-Object -First 1
            
            if ($SecureTunnel) {
              $TunnelAddress = $SecureTunnel.public_url -replace "tcp://", ""
              Write-Host "RDP Address: $TunnelAddress"
              Write-Host "Username: runneradmin"
              Write-Host "Password: Use the RDP_PASSWORD secret"
              break
            }
          } catch {
            Write-Host "Attempting to fetch tunnel address failed. Retrying..."
          }
          
          Start-Sleep -Seconds 5
          $RetryCount++
        }

    - name: Keep alive
      run: |
        $Timeout = [int]${{ fromJSON(github.event.inputs.timeout-minutes) }} * 60
        Write-Host "Session will remain active for the next $Timeout seconds."
        
        # Keep the session alive for the specified timeout duration
        Start-Sleep -Seconds $Timeout
