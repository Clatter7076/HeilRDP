name: Secure RDP with Cloudflare API

on:
  workflow_dispatch:
    inputs:
      timeout-minutes:
        description: 'Timeout in minutes'
        required: true
        default: '360'

jobs:
  setup-rdp:
    name: Setup Secure RDP
    runs-on: windows-latest
    timeout-minutes: ${{ fromJSON(github.event.inputs.timeout-minutes) }}

    steps:
    - name: Check for required secrets
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        RDP_PASSWORD: ${{ secrets.RDP_PASSWORD }}
      run: |
        if (-not $env:CLOUDFLARE_API_TOKEN -or -not $env:CLOUDFLARE_ACCOUNT_ID -or -not $env:RDP_PASSWORD) {
          throw "Missing required secrets. Please set CLOUDFLARE_API_TOKEN, CLOUDFLARE_ACCOUNT_ID, and RDP_PASSWORD in your repository secrets."
        }

    - name: Install Cloudflared using Chocolatey
      run: |
        choco install cloudflared -y

    - name: Enable and Configure Remote Desktop
      env:
        RDP_PASSWORD: ${{ secrets.RDP_PASSWORD }}
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1
        Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText $env:RDP_PASSWORD -Force)
        Write-Host "RDP enabled and configured."

    - name: Create and Configure Cloudflare Tunnel
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      run: |
        $tunnelName = "rdp-tunnel-" + (Get-Random)
        
        # Create tunnel using Cloudflare API
        $createTunnelBody = @{
          name = $tunnelName
          tunnel_secret = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes((New-Guid).ToString()))
        } | ConvertTo-Json

        $createTunnelResponse = Invoke-RestMethod -Uri "https://api.cloudflare.com/client/v4/accounts/$env:CLOUDFLARE_ACCOUNT_ID/tunnels" `
          -Method Post `
          -Headers @{"Authorization" = "Bearer $env:CLOUDFLARE_API_TOKEN"; "Content-Type" = "application/json"} `
          -Body $createTunnelBody

        $tunnelId = $createTunnelResponse.result.id
        Write-Host "Tunnel created with ID: $tunnelId"

        # Configure tunnel
        $configureBody = @{
          tunnel = @{
            credentials = @{
              account = $env:CLOUDFLARE_ACCOUNT_ID
              tunnel_secret = $createTunnelResponse.result.tunnel_secret
              tunnel_id = $tunnelId
            }
          }
          ingress = @(
            @{
              service = "rdp://localhost:3389"
              hostname = "$tunnelName.trycloudflare.com"
            },
            @{
              service = "http_status:404"
            }
          )
        } | ConvertTo-Json -Depth 10

        $configPath = "$env:USERPROFILE\.cloudflared\config.json"
        New-Item -ItemType Directory -Force -Path "$env:USERPROFILE\.cloudflared"
        Set-Content -Path $configPath -Value $configureBody

        # Start the tunnel
        Start-Process -FilePath cloudflared -ArgumentList "tunnel run --config $configPath $tunnelId" -NoNewWindow

        Start-Sleep -Seconds 15

        Write-Host "Cloudflare Tunnel created and running."
        Write-Host "RDP Address: $tunnelName.trycloudflare.com"
        Write-Host "Username: runneradmin"
        Write-Host "Password: Use the RDP_PASSWORD secret"

    - name: Keep Alive
      run: |
        $timeout = [int]${{ github.event.inputs.timeout-minutes }} * 60
        Write-Host "Session will remain active for the next $timeout seconds."
        Start-Sleep -Seconds $timeout
