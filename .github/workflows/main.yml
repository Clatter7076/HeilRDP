name: Secure RDP with Cloudflared

on:
  workflow_dispatch:
    inputs:
      timeout-minutes:
        description: 'Timeout in minutes'
        required: true
        default: '360'

jobs:
  setup-rdp:
    name: Setup Secure RDP
    runs-on: windows-latest
    timeout-minutes: ${{ fromJSON(github.event.inputs.timeout-minutes) }}

    steps:
    - name: Check for required secrets
      env:
        CLOUDFLARE_TOKEN: ${{ secrets.CLOUDFLARE_TOKEN }}
        RDP_PASSWORD: ${{ secrets.RDP_PASSWORD }}
      run: |
        if (-not $env:CLOUDFLARE_TOKEN -or -not $env:RDP_PASSWORD) {
          throw "Missing required secrets. Please set CLOUDFLARE_TOKEN and RDP_PASSWORD in your repository secrets."
        }

    - name: Install Cloudflared using Chocolatey
      run: |
        choco install cloudflared -y

    - name: Authenticate Cloudflared
      env:
        CLOUDFLARE_TOKEN: ${{ secrets.CLOUDFLARE_TOKEN }}
      run: |
        New-Item -ItemType Directory -Force -Path $env:USERPROFILE\.cloudflared
        Set-Content -Path "$env:USERPROFILE\.cloudflared\cert.pem" -Value $env:CLOUDFLARE_TOKEN
        cloudflared tunnel login
        if (-not $?) { throw "Cloudflared authentication failed" }

    - name: Enable and Configure Remote Desktop
      env:
        RDP_PASSWORD: ${{ secrets.RDP_PASSWORD }}
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1
        Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText $env:RDP_PASSWORD -Force)
        Write-Host "RDP enabled and configured."

    - name: Create and Run Cloudflare Tunnel
      run: |
        $tunnelName = "rdp-tunnel-" + (Get-Random)
        $tunnelOutput = cloudflared tunnel create $tunnelName
        if (-not $?) { throw "Failed to create Cloudflare tunnel" }
        
        $tunnelId = ($tunnelOutput | Select-String -Pattern "Created tunnel .* with id (.*)").Matches.Groups[1].Value
        if (-not $tunnelId) { throw "Failed to extract tunnel ID" }
        
        $configContent = @"
        tunnel: $tunnelId
        credentials-file: $env:USERPROFILE\.cloudflared\$tunnelId.json
        ingress:
          - service: rdp://localhost:3389
          - service: http_status:404
        "@
        Set-Content -Path "$env:USERPROFILE\.cloudflared\config.yml" -Value $configContent
        
        Start-Process -FilePath cloudflared -ArgumentList "tunnel --config $env:USERPROFILE\.cloudflared\config.yml run $tunnelName" -NoNewWindow
        
        Start-Sleep -Seconds 15
        
        $tunnelInfo = cloudflared tunnel info $tunnelName
        if (-not $?) { throw "Failed to get tunnel info" }
        
        $tunnelUrl = ($tunnelInfo | Select-String -Pattern "https://.+\.trycloudflare\.com").Matches.Value
        if (-not $tunnelUrl) { throw "Failed to extract tunnel URL" }
        
        Write-Host "Cloudflare Tunnel created and running."
        Write-Host "RDP Address: $tunnelUrl"
        Write-Host "Username: runneradmin"
        Write-Host "Password: Use the RDP_PASSWORD secret"

    - name: Keep Alive
      run: |
        $timeout = [int]${{ github.event.inputs.timeout-minutes }} * 60
        Write-Host "Session will remain active for the next $timeout seconds."
        Start-Sleep -Seconds $timeout
